---
title: "Design"
subtitle: "Assignment schemes"
format: 
   revealjs:
    embed-resources: true
    theme: serif
    slide-level: 3
    slide-number: true
    show-slide-number: all
    preview-links: auto
    number-sections: true
    link-color: orange
author: "Macartan Humphreys"
bibliography: bib.bib
---

```{r, include = FALSE}

source("setup.R")

```

# Assignments with `DeclareDesign`



## Assignments with `DeclareDesign`

### A design: Multilevel data

A design with hierarchical data and different assignment schemes.

```{r}
design <- 
  declare_model(
    school = add_level(N = 16, 
                       u_school = rnorm(N, mean = 0)),     
    classroom = add_level(N = 4,    
                  u_classroom = rnorm(N, mean = 0)),
    student =  add_level(N = 20,    
                         u_student = rnorm(N, mean = 0))
    ) +
  declare_model(
    potential_outcomes(Y ~ .1*Z + u_classroom + u_student + u_school)
    ) +
  declare_assignment(Z = simple_ra(N)) + 
  declare_measurement(Y = reveal_outcomes(Y ~ Z))  +
  declare_inquiry(ATE = mean(Y_Z_1 - Y_Z_0)) + 
  declare_estimator(Y ~ Z, .method = difference_in_means)    

```

### Sample data  {.smaller}

Here are the first couple of rows and columns of the resulting data frame.

```{r}
my_data <- draw_data(design)
kable(head(my_data), digits = 2)
```

### Sample data  {.smaller}

Here is the distribution between treatment and control:

```{r}
kable(t(as.matrix(table(my_data$Z))), 
      col.names = c("control", "treatment"))
```

### Complete Random Assignment using the built in function  {.smaller}

```{r, echo = TRUE}
assignment_complete <-   declare_assignment(Z = complete_ra(N))  

design_complete <- 
  replace_step(design, "assignment", assignment_complete)

```

### Data from complete assignment  {.smaller}

We can draw a new set of data and look at the number of subjects in the treatment and control groups.

```{r}
set.seed(1:5)
data_complete <- draw_data(design_complete)

kable(t(as.matrix(table(data_complete$Z))))
```

### Plotted  {.smaller}

```{r, warning = F, message = F, echo = F, fig.width = 7, fig.height= 2.2}

tile_design <- function(design)
  
  design |>  draw_data() |>
  arrange(classroom, Z) |>
  group_by(school, classroom) |>
  mutate(student_in_class = 1:n()) |>
  ungroup() |>
  mutate(Z  = factor(Z, 0:1, c("control", "treatment"))) |>
  
  ggplot(aes(as.factor(classroom),
           as.factor(student_in_class),
           fill = Z, order = -as.numeric(Z))) + 
  geom_tile(colour = "white") + 
  scale_fill_discrete(na.value = 'light gray', h = c(240, 120)) +
  theme(axis.line=element_blank(),
      axis.ticks=element_blank(),
      panel.background=element_blank(),
      panel.border=element_blank(),
      panel.grid.major=element_blank(),
      panel.grid.minor=element_blank(),
      plot.background=element_blank(),
      text = element_text(size=8),
      axis.text = element_text(size=5)) +
  xlab("Classroom") + ylab("Student")

tile_design(design_complete)
```

### Block Random Assignment {#blockedAss}

-   The treatment and control group will **in expectation** contain the same share of students in different classrooms.
-   But as we saw this does necessarily hold in **realization**
-   We make this more obvious by sorting the students by treatment status with schools

### Blocked design

```{r, echo = TRUE}
assignment_blocked <-   
  declare_assignment(Z = block_ra(blocks = classroom))  

estimator_blocked <- 
  declare_estimator(Y ~ Z, blocks = classroom, 
                    .method = difference_in_means)  

design_blocked <- 
  design |> 
  replace_step("assignment", assignment_blocked) |>
  replace_step("estimator", estimator_blocked)

```

### Illustration of blocked assignment

-   Note that subjects are sorted here after the assignment to make it easier to see that in this case blocking ensures that exactly 5 students within each classroom are assigned to treatment.

```{r, warning = F, message = F, echo = F, fig.width = 7, fig.height= 3}

tile_design(design_blocked)
```

### Clustering

But what if all students in a given class have to be assigned the same treatment?

```{r, echo = TRUE}
assignment_clustered <- 
  declare_assignment(Z = cluster_ra(clusters = classroom))  
estimator_clustered <- 
  declare_estimator(Y ~ Z, clusters = classroom, 
                    .method = difference_in_means)  


design_clustered <- 
  design |> 
  replace_step("assignment", assignment_clustered) |> 
  replace_step("estimator", estimator_clustered)

```

### Illustration of clustered assignment

```{r, warning = F, message = F, echo = F, fig.width = 7, fig.height= 3}

tile_design(design_clustered)
```

### Clustered and Blocked

```{r, echo = TRUE}
assignment_clustered_blocked <-   
  declare_assignment(Z = block_and_cluster_ra(blocks = school,
                                              clusters = classroom))  
estimator_clustered_blocked <- 
  declare_estimator(Y ~ Z, blocks = school, clusters = classroom, 
                    .method = difference_in_means)  


design_clustered_blocked <- 
  design |> 
  replace_step("assignment", assignment_clustered_blocked) |> 
  replace_step("estimator", estimator_clustered_blocked)

```

### Illustration of clustered and blocked assignment

```{r, warning = F, message = F, echo = F, fig.width = 7, fig.height= 3}

tile_design(design_clustered_blocked)
```

### Illustration of efficiency gains from blocking  {.smaller}

```{r, warning = F, message = F}
designs <- 
  list(
    simple = design, 
    complete = design_complete, 
    blocked = design_blocked, 
    clustered = design_clustered,  
    clustered_blocked = design_clustered_blocked) 
```

```{r, eval = FALSE}
diagnoses <- diagnose_design(designs)
```

### Illustration of efficiency gains from blocking {.smaller}

```{r, echo = FALSE}
if(run)
  diagnose_design(designs, sims = 1000) |>
  write_rds("saved/assignment_diagnosis.rds")

diagnoses <- read_rds("saved/assignment_diagnosis.rds") 

diagnoses |>
  reshape_diagnosis() |> 
    select(Design, Power, Coverage) |>
  kable()
```

### Sampling distributions

```{r}

diagnoses$simulations_df |> 
  mutate(design = factor(design, c("blocked", "complete", "simple", "clustered_blocked", "clustered"))) |>
  ggplot(aes(estimate)) +
  geom_histogram() + facet_grid(~design)

```

### Nasty integer issues {.smaller}

* In many designs you seek to assign an integer number of subjects to treatment from some set.

* Sometimes however your assignment targets are not integers.

Example:

* I have 12 subjects in four blocks of 3 and I want to assign each subject to treatment with a 50% probability.

Two strategies:

1. I randomly set a target of either 1 or 2 for each block and then do complete assignment in each block. This can result in the numbers treated varying from 4 to 8 
2. I randomly assign a target of 1 for two blocks and 2 for the other two blocks: **Intuition**--set a floor for the minimal target and then distribue the residual probability across blocks

### Nasty integer issues  {.smaller}

```{r}
# remotes::install_github("macartan/probra")
library(probra)
set.seed(1)

blocks <- rep(1:4, each = 3)

table(blocks, prob_ra(blocks = blocks))

table(blocks, block_ra(blocks = blocks))

```

### Nasty integer issues  {.smaller}

Can also be used to set targets

```{r}
# remotes::install_github("macartan/probra")
library(probra)
set.seed(1)

fabricate(N = 4,  size = c(47, 53, 87, 25), n_treated = prob_ra(.5*size)) %>%
  janitor::adorn_totals("row") |> 
  kable(caption = "Setting targets to get 50% targets with minimal variance")


```


### Nasty integer issues  {.smaller}

Can also be used to set for complete assignment with heterogeneous propensities

```{r, fig.height = 2, fig.width = 8}
set.seed(1)

df <- fabricate(N = 100,  p = seq(.1, .9, length = 100), Z = prob_ra(p)) 

mean(df$Z)

df |> ggplot(aes(p, Z)) + geom_point() + theme_bw()
 
```


## Indirect assignments

*Indirect control*

### Indirect assignments {.smaller}

Indirect assignments are generally generated by applying a direct assignment and then figuring our an implied indirect assignment

```{r}
set.seed(1)

df <-
  fabricate(
    N = 100, 
    latitude = runif(N),
    longitude = runif(N))

adjacency <- 
  sapply(1:nrow(df), function(i) 
    1*((df$latitude[i] - df$latitude)^2 + (df$longitude[i] - df$longitude)^2)^.5 < .1)

diag(adjacency) <- 0
```

### Indirect assignments {.smaller}

```{r}
adjacency |>  
  reshape2::melt(c("x", "y"), value.name = "z") |> mutate(z = factor(z)) |>
  ggplot(aes(x=x,y=y,fill=z))+
  geom_tile()
```


### Indirect assignments  {.smaller}

```{r}
n_assigned <- 50

design <-
  declare_model(data = df) + 
  declare_assignment(
    direct = complete_ra(N, m = n_assigned),
    indirect = 1*(as.vector(as.vector(direct) %*% adjacency) >= 1))

draw_data(design) |> with(table(direct, indirect))

```

### Indirect assignments: Properties

```{r, eval = FALSE}
indirect_propensities <- replicate(5000, draw_data(design)$indirect) |> 
  apply(1, mean) 
```

```{r, echo = FALSE}

if(run) 
  replicate(5000, draw_data(design)$indirect) |> 
  apply(1, mean) |>
  write_rds("saved/wild_1.rds")

indirect_propensities_1 <-  read_rds("saved/wild_1.rds")

indirect_propensities_1 |>   
  hist(xlab = paste("Indirect propensities: mean = ", indirect_propensities_1 |> mean()))
```

### Indirect assignments: Properties

```{r}
df |> ggplot(aes(latitude, longitude, label = round(indirect_propensities_1, 2))) + geom_text()
```


### Indirect assignments: Redesign

```{r, eval = FALSE}
replicate(5000, draw_data(design |> redesign(n_assigned = 25))$indirect) |> 
  apply(1, mean) 
```

```{r, echo = FALSE}

if(run) 
  replicate(5000, draw_data(design |> redesign(n_assigned = 25))$indirect) |> 
  apply(1, mean) |>
  write_rds("saved/wild_2.rds")

indirect_propensities_2 <-  read_rds("saved/wild_2.rds")

indirect_propensities_2 |>   
  hist(xlab = paste("Indirect propensities: mean = ", indirect_propensities_2 |> mean()))
```

### Indirect assignments: Redesign

```{r}

df |> ggplot(aes(latitude, longitude, label = round(indirect_propensities_2, 2))) + 
  geom_text()
```

Looks better: *but there are trade offs between the direct and indirect distributions*

Figuring out the optimal procedure requires full diagnosis



## Factorial Designs

### Factorial Designs

-   Often when you set up an experiment you want to look at more than one treatment.
-   Should you do this or not? How should you use your power?

### Factorial Designs {.smaller}

-   Often when you set up an experiment you want to look at more than one treatment.
-   Should you do this or not? How should you use your power?

Load up:

|        | $T2=0$ | $T2=1$ |
|--------|--------|--------|
| T1 = 0 | $50\%$ | $0\%$  |
| T1 = 1 | $50\%$ | $0\%$  |


Spread out:

|        | $T2=0$ | $T2=1$ |
|--------|--------|--------|
| T1 = 0 | $25\%$ | $25\%$ |
| T1 = 1 | $25\%$ | $25\%$ |



### Factorial Designs {.smaller}

-   Often when you set up an experiment you want to look at more than one treatment.
-   Should you do this or not? How should you use your power?



Three arm it?:

|        | $T2=0$   | $T2=1$   |
|--------|----------|----------|
| T1 = 0 | $33.3\%$ | $33.3\%$ |
| T1 = 1 | $33.3\%$ | $0\%$    |


Bunch it?:

|        | $T2=0$   | $T2=1$   |
|--------|----------|----------|
| T1 = 0 | $40\%$ | $20\%$ |
| T1 = 1 | $20\%$ | $20\%$    |


### Factorial Designs {.smaller}

Two ways to do factorialtial assignments in `DeclareDesign`:

```{r, eval = FALSE}
# Block the second assignment
declare_assignment(Z1 = complete_ra(N)) +
declare_assignment(Z2 = block_ra(blocks = Z1)) +
  
# Recode four arms  
declare_assignment(Z = complete_ra(N, num_arms = 4)) +
declare_measurement(Z1 = (Z == "T2" | Z == "T4"),
                      Z2 = (Z == "T3" | Z == "T4"))
  

```

### Factorial Designs: In practice {.smaller}

-   In practice if you have a lot of treatments it can be hard to do full factorial designs -- there may be too many combinations.

-   In such cases people use **fractional factorial designs**, like the one below (5 treatments but only 8 units!)

| Variation | T1  | T2  | T3  | T4  | T5  |
|-----------|-----|-----|-----|-----|-----|
| 1         | 0   | 0   | 0   | 1   | 1   |
| 2         | 0   | 0   | 1   | 0   | 0   |
| 3         | 0   | 1   | 0   | 0   | 1   |
| 4         | 0   | 1   | 1   | 1   | 0   |
| 5         | 1   | 0   | 0   | 1   | 0   |
| 6         | 1   | 0   | 1   | 0   | 1   |
| 7         | 1   | 1   | 0   | 0   | 0   |
| 8         | 1   | 1   | 1   | 1   | 1   |

### Factorial Designs: In practice {.smaller}

-   Then randomly assign units to rows. Note columns might also be blocking covariates.

-   In R, look at `library(survey)`

### Factorial Designs: In practice {.smaller}

-   But be careful: you have to be comfortable with possibly not having any simple counterfactual unit for any unit (invoke sparsity-of-effects principle).

| Unit | T1  | T2  | T3  | T4  | T5  |
|------|-----|-----|-----|-----|-----|
| 1    | 0   | 0   | 0   | 1   | 1   |
| 2    | 0   | 0   | 1   | 0   | 0   |
| 3    | 0   | 1   | 0   | 0   | 1   |
| 4    | 0   | 1   | 1   | 1   | 0   |
| 5    | 1   | 0   | 0   | 1   | 0   |
| 6    | 1   | 0   | 1   | 0   | 1   |
| 7    | 1   | 1   | 0   | 0   | 0   |
| 8    | 1   | 1   | 1   | 1   | 1   |

-   In R, look at `library(survey)`
